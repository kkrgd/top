{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatRFC7231;\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nfunction formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n  var originalDate = (0, _index.default)(dirtyDate);\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = (0, _index3.default)(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = (0, _index3.default)(originalDate.getUTCHours(), 2);\n  var minute = (0, _index3.default)(originalDate.getUTCMinutes(), 2);\n  var second = (0, _index3.default)(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","formatRFC7231","_index","_interopRequireDefault","require","_index2","_index3","obj","__esModule","days","months","dirtyDate","arguments","length","TypeError","concat","originalDate","RangeError","dayName","getUTCDay","dayOfMonth","getUTCDate","monthName","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","module"],"sources":["C:/workSpace/react/stSociety/oitaConference/node_modules/date-fns/formatRFC7231/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatRFC7231;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nfunction formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = (0, _index3.default)(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = (0, _index3.default)(originalDate.getUTCHours(), 2);\n  var minute = (0, _index3.default)(originalDate.getUTCMinutes(), 2);\n  var second = (0, _index3.default)(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}\n\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}