{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatRFC3339;\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\nvar _index4 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nfunction formatRFC3339(dirtyDate, options) {\n  var _options$fractionDigi;\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n  var originalDate = (0, _index.default)(dirtyDate);\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n  var fractionDigits = Number((_options$fractionDigi = options === null || options === void 0 ? void 0 : options.fractionDigits) !== null && _options$fractionDigi !== void 0 ? _options$fractionDigi : 0); // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n  var day = (0, _index3.default)(originalDate.getDate(), 2);\n  var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = (0, _index3.default)(originalDate.getHours(), 2);\n  var minute = (0, _index3.default)(originalDate.getMinutes(), 2);\n  var second = (0, _index3.default)(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + (0, _index3.default)(fractionalSeconds, fractionDigits);\n  }\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = (0, _index3.default)((0, _index4.default)(absoluteOffset / 60), 2);\n    var minuteOffset = (0, _index3.default)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","formatRFC3339","_index","_interopRequireDefault","require","_index2","_index3","_index4","obj","__esModule","dirtyDate","options","_options$fractionDigi","arguments","length","TypeError","concat","originalDate","RangeError","fractionDigits","Number","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","fractionalSeconds","Math","floor","pow","offset","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","minuteOffset","sign","module"],"sources":["C:/workSpace/react/stSociety/oitaConference/node_modules/date-fns/formatRFC3339/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatRFC3339;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nfunction formatRFC3339(dirtyDate, options) {\n  var _options$fractionDigi;\n\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var fractionDigits = Number((_options$fractionDigi = options === null || options === void 0 ? void 0 : options.fractionDigits) !== null && _options$fractionDigi !== void 0 ? _options$fractionDigi : 0); // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = (0, _index3.default)(originalDate.getDate(), 2);\n  var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = (0, _index3.default)(originalDate.getHours(), 2);\n  var minute = (0, _index3.default)(originalDate.getMinutes(), 2);\n  var second = (0, _index3.default)(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + (0, _index3.default)(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = (0, _index3.default)((0, _index4.default)(absoluteOffset / 60), 2);\n    var minuteOffset = (0, _index3.default)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,aAAa;AAE/B,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAElE,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAEpE,IAAIE,OAAO,GAAGH,sBAAsB,CAACC,OAAO,CAAC,kCAAkC,CAAC,CAAC;AAEjF,IAAIG,OAAO,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE3E,SAASD,sBAAsBA,CAACK,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAER,OAAO,EAAEQ;EAAI,CAAC;AAAE;;AAE9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASP,aAAaA,CAACS,SAAS,EAAEC,OAAO,EAAE;EACzC,IAAIC,qBAAqB;EAEzB,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CAAC,iCAAiC,CAACC,MAAM,CAACH,SAAS,CAACC,MAAM,EAAE,UAAU,CAAC,CAAC;EAC7F;EAEA,IAAIG,YAAY,GAAG,CAAC,CAAC,EAAEf,MAAM,CAACF,OAAO,EAAEU,SAAS,CAAC;EAEjD,IAAI,CAAC,CAAC,CAAC,EAAEL,OAAO,CAACL,OAAO,EAAEiB,YAAY,CAAC,EAAE;IACvC,MAAM,IAAIC,UAAU,CAAC,oBAAoB,CAAC;EAC5C;EAEA,IAAIC,cAAc,GAAGC,MAAM,CAAC,CAACR,qBAAqB,GAAGD,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACQ,cAAc,MAAM,IAAI,IAAIP,qBAAqB,KAAK,KAAK,CAAC,GAAGA,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE1M,IAAI,EAAEO,cAAc,IAAI,CAAC,IAAIA,cAAc,IAAI,CAAC,CAAC,EAAE;IACjD,MAAM,IAAID,UAAU,CAAC,oDAAoD,CAAC;EAC5E;EAEA,IAAIG,GAAG,GAAG,CAAC,CAAC,EAAEf,OAAO,CAACN,OAAO,EAAEiB,YAAY,CAACK,OAAO,EAAE,EAAE,CAAC,CAAC;EACzD,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAEjB,OAAO,CAACN,OAAO,EAAEiB,YAAY,CAACO,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;EAChE,IAAIC,IAAI,GAAGR,YAAY,CAACS,WAAW,EAAE;EACrC,IAAIC,IAAI,GAAG,CAAC,CAAC,EAAErB,OAAO,CAACN,OAAO,EAAEiB,YAAY,CAACW,QAAQ,EAAE,EAAE,CAAC,CAAC;EAC3D,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAEvB,OAAO,CAACN,OAAO,EAAEiB,YAAY,CAACa,UAAU,EAAE,EAAE,CAAC,CAAC;EAC/D,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAEzB,OAAO,CAACN,OAAO,EAAEiB,YAAY,CAACe,UAAU,EAAE,EAAE,CAAC,CAAC;EAC/D,IAAIC,gBAAgB,GAAG,EAAE;EAEzB,IAAId,cAAc,GAAG,CAAC,EAAE;IACtB,IAAIe,YAAY,GAAGjB,YAAY,CAACkB,eAAe,EAAE;IACjD,IAAIC,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,GAAGG,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEpB,cAAc,GAAG,CAAC,CAAC,CAAC;IACnFc,gBAAgB,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE3B,OAAO,CAACN,OAAO,EAAEoC,iBAAiB,EAAEjB,cAAc,CAAC;EAClF;EAEA,IAAIqB,MAAM,GAAG,EAAE;EACf,IAAIC,QAAQ,GAAGxB,YAAY,CAACyB,iBAAiB,EAAE;EAE/C,IAAID,QAAQ,KAAK,CAAC,EAAE;IAClB,IAAIE,cAAc,GAAGN,IAAI,CAACO,GAAG,CAACH,QAAQ,CAAC;IACvC,IAAII,UAAU,GAAG,CAAC,CAAC,EAAEvC,OAAO,CAACN,OAAO,EAAE,CAAC,CAAC,EAAEO,OAAO,CAACP,OAAO,EAAE2C,cAAc,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;IACnF,IAAIG,YAAY,GAAG,CAAC,CAAC,EAAExC,OAAO,CAACN,OAAO,EAAE2C,cAAc,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;IAEjE,IAAII,IAAI,GAAGN,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;IACnCD,MAAM,GAAG,EAAE,CAACxB,MAAM,CAAC+B,IAAI,CAAC,CAAC/B,MAAM,CAAC6B,UAAU,EAAE,GAAG,CAAC,CAAC7B,MAAM,CAAC8B,YAAY,CAAC;EACvE,CAAC,MAAM;IACLN,MAAM,GAAG,GAAG;EACd;EAEA,OAAO,EAAE,CAACxB,MAAM,CAACS,IAAI,EAAE,GAAG,CAAC,CAACT,MAAM,CAACO,KAAK,EAAE,GAAG,CAAC,CAACP,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,CAACL,MAAM,CAACW,IAAI,EAAE,GAAG,CAAC,CAACX,MAAM,CAACa,MAAM,EAAE,GAAG,CAAC,CAACb,MAAM,CAACe,MAAM,CAAC,CAACf,MAAM,CAACiB,gBAAgB,CAAC,CAACjB,MAAM,CAACwB,MAAM,CAAC;AAC9J;AAEAQ,MAAM,CAAClD,OAAO,GAAGA,OAAO,CAACE,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}