{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = intlFormatDistance;\nvar _index = require(\"../constants/index.js\");\nvar _index2 = _interopRequireDefault(require(\"../differenceInCalendarDays/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../differenceInCalendarMonths/index.js\"));\nvar _index4 = _interopRequireDefault(require(\"../differenceInCalendarQuarters/index.js\"));\nvar _index5 = _interopRequireDefault(require(\"../differenceInCalendarWeeks/index.js\"));\nvar _index6 = _interopRequireDefault(require(\"../differenceInCalendarYears/index.js\"));\nvar _index7 = _interopRequireDefault(require(\"../differenceInHours/index.js\"));\nvar _index8 = _interopRequireDefault(require(\"../differenceInMinutes/index.js\"));\nvar _index9 = _interopRequireDefault(require(\"../differenceInSeconds/index.js\"));\nvar _index10 = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index11 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with.\n * @param {Object} [options] - an object with options.\n * @param {String} [options.unit] - formats the distance with the given unit ('year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second').\n * @param {String|String[]} [options.locale] - the locale to use.\n * @param {String} [options.localeMatcher='best fit'] - the locale matching algorithm to use. Other value: 'lookup'.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * @param {String} [options.numeric='auto'] - the output message format. The values are 'auto' (e.g. `yesterday`), 'always'(e.g. `1 day ago`).\n * @param {String} [options.style='long'] - the length of the result. The values are: 'long' (e.g. `1 month`), 'short' (e.g. 'in 1 mo.'), 'narrow' (e.g. 'in 1 mo.').\n * The narrow one could be similar to the short one for some locales.\n * @returns {String} the distance in words according to language-sensitive relative time formatting.\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.unit` must not be invalid Unit\n * @throws {RangeError} `options.locale` must not be invalid locale\n * @throws {RangeError} `options.localeMatcher` must not be invalid localeMatcher\n * @throws {RangeError} `options.numeric` must not be invalid numeric\n * @throws {RangeError} `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nfunction intlFormatDistance(date, baseDate, options) {\n  (0, _index11.default)(2, arguments);\n  var value = 0;\n  var unit;\n  var dateLeft = (0, _index10.default)(date);\n  var dateRight = (0, _index10.default)(baseDate);\n  if (!(options !== null && options !== void 0 && options.unit)) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    var diffInSeconds = (0, _index9.default)(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < _index.secondsInMinute) {\n      value = (0, _index9.default)(dateLeft, dateRight);\n      unit = 'second';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {\n      value = (0, _index8.default)(dateLeft, dateRight);\n      unit = 'minute';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.default)(dateLeft, dateRight)) < 1) {\n      value = (0, _index7.default)(dateLeft, dateRight);\n      unit = 'hour';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.default)(dateLeft, dateRight)) && Math.abs(value) < 7) {\n      unit = 'day';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {\n      value = (0, _index5.default)(dateLeft, dateRight);\n      unit = 'week';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {\n      value = (0, _index3.default)(dateLeft, dateRight);\n      unit = 'month';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {\n      if ((0, _index4.default)(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = (0, _index4.default)(dateLeft, dateRight);\n        unit = 'quarter';\n      } else {\n        value = (0, _index6.default)(dateLeft, dateRight);\n        unit = 'year';\n      }\n    } else {\n      value = (0, _index6.default)(dateLeft, dateRight);\n      unit = 'year';\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options === null || options === void 0 ? void 0 : options.unit;\n    if (unit === 'second') {\n      value = (0, _index9.default)(dateLeft, dateRight);\n    } else if (unit === 'minute') {\n      value = (0, _index8.default)(dateLeft, dateRight);\n    } else if (unit === 'hour') {\n      value = (0, _index7.default)(dateLeft, dateRight);\n    } else if (unit === 'day') {\n      value = (0, _index2.default)(dateLeft, dateRight);\n    } else if (unit === 'week') {\n      value = (0, _index5.default)(dateLeft, dateRight);\n    } else if (unit === 'month') {\n      value = (0, _index3.default)(dateLeft, dateRight);\n    } else if (unit === 'quarter') {\n      value = (0, _index4.default)(dateLeft, dateRight);\n    } else if (unit === 'year') {\n      value = (0, _index6.default)(dateLeft, dateRight);\n    }\n  }\n  var rtf = new Intl.RelativeTimeFormat(options === null || options === void 0 ? void 0 : options.locale, {\n    localeMatcher: options === null || options === void 0 ? void 0 : options.localeMatcher,\n    numeric: (options === null || options === void 0 ? void 0 : options.numeric) || 'auto',\n    style: options === null || options === void 0 ? void 0 : options.style\n  });\n  return rtf.format(value, unit);\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","intlFormatDistance","_index","require","_index2","_interopRequireDefault","_index3","_index4","_index5","_index6","_index7","_index8","_index9","_index10","_index11","obj","__esModule","date","baseDate","options","arguments","unit","dateLeft","dateRight","diffInSeconds","Math","abs","secondsInMinute","secondsInHour","secondsInDay","secondsInWeek","secondsInMonth","secondsInQuarter","secondsInYear","rtf","Intl","RelativeTimeFormat","locale","localeMatcher","numeric","style","format","module"],"sources":["C:/workSpace/react/stSociety/oitaConference/node_modules/date-fns/intlFormatDistance/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = intlFormatDistance;\n\nvar _index = require(\"../constants/index.js\");\n\nvar _index2 = _interopRequireDefault(require(\"../differenceInCalendarDays/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../differenceInCalendarMonths/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../differenceInCalendarQuarters/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../differenceInCalendarWeeks/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../differenceInCalendarYears/index.js\"));\n\nvar _index7 = _interopRequireDefault(require(\"../differenceInHours/index.js\"));\n\nvar _index8 = _interopRequireDefault(require(\"../differenceInMinutes/index.js\"));\n\nvar _index9 = _interopRequireDefault(require(\"../differenceInSeconds/index.js\"));\n\nvar _index10 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index11 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with.\n * @param {Object} [options] - an object with options.\n * @param {String} [options.unit] - formats the distance with the given unit ('year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second').\n * @param {String|String[]} [options.locale] - the locale to use.\n * @param {String} [options.localeMatcher='best fit'] - the locale matching algorithm to use. Other value: 'lookup'.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * @param {String} [options.numeric='auto'] - the output message format. The values are 'auto' (e.g. `yesterday`), 'always'(e.g. `1 day ago`).\n * @param {String} [options.style='long'] - the length of the result. The values are: 'long' (e.g. `1 month`), 'short' (e.g. 'in 1 mo.'), 'narrow' (e.g. 'in 1 mo.').\n * The narrow one could be similar to the short one for some locales.\n * @returns {String} the distance in words according to language-sensitive relative time formatting.\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.unit` must not be invalid Unit\n * @throws {RangeError} `options.locale` must not be invalid locale\n * @throws {RangeError} `options.localeMatcher` must not be invalid localeMatcher\n * @throws {RangeError} `options.numeric` must not be invalid numeric\n * @throws {RangeError} `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nfunction intlFormatDistance(date, baseDate, options) {\n  (0, _index11.default)(2, arguments);\n  var value = 0;\n  var unit;\n  var dateLeft = (0, _index10.default)(date);\n  var dateRight = (0, _index10.default)(baseDate);\n\n  if (!(options !== null && options !== void 0 && options.unit)) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    var diffInSeconds = (0, _index9.default)(dateLeft, dateRight); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < _index.secondsInMinute) {\n      value = (0, _index9.default)(dateLeft, dateRight);\n      unit = 'second';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {\n      value = (0, _index8.default)(dateLeft, dateRight);\n      unit = 'minute';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.default)(dateLeft, dateRight)) < 1) {\n      value = (0, _index7.default)(dateLeft, dateRight);\n      unit = 'hour';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.default)(dateLeft, dateRight)) && Math.abs(value) < 7) {\n      unit = 'day';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {\n      value = (0, _index5.default)(dateLeft, dateRight);\n      unit = 'week';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {\n      value = (0, _index3.default)(dateLeft, dateRight);\n      unit = 'month';\n    } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {\n      if ((0, _index4.default)(dateLeft, dateRight) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = (0, _index4.default)(dateLeft, dateRight);\n        unit = 'quarter';\n      } else {\n        value = (0, _index6.default)(dateLeft, dateRight);\n        unit = 'year';\n      }\n    } else {\n      value = (0, _index6.default)(dateLeft, dateRight);\n      unit = 'year';\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options === null || options === void 0 ? void 0 : options.unit;\n\n    if (unit === 'second') {\n      value = (0, _index9.default)(dateLeft, dateRight);\n    } else if (unit === 'minute') {\n      value = (0, _index8.default)(dateLeft, dateRight);\n    } else if (unit === 'hour') {\n      value = (0, _index7.default)(dateLeft, dateRight);\n    } else if (unit === 'day') {\n      value = (0, _index2.default)(dateLeft, dateRight);\n    } else if (unit === 'week') {\n      value = (0, _index5.default)(dateLeft, dateRight);\n    } else if (unit === 'month') {\n      value = (0, _index3.default)(dateLeft, dateRight);\n    } else if (unit === 'quarter') {\n      value = (0, _index4.default)(dateLeft, dateRight);\n    } else if (unit === 'year') {\n      value = (0, _index6.default)(dateLeft, dateRight);\n    }\n  }\n\n  var rtf = new Intl.RelativeTimeFormat(options === null || options === void 0 ? void 0 : options.locale, {\n    localeMatcher: options === null || options === void 0 ? void 0 : options.localeMatcher,\n    numeric: (options === null || options === void 0 ? void 0 : options.numeric) || 'auto',\n    style: options === null || options === void 0 ? void 0 : options.style\n  });\n  return rtf.format(value, unit);\n}\n\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,kBAAkB;AAEpC,IAAIC,MAAM,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE7C,IAAIC,OAAO,GAAGC,sBAAsB,CAACF,OAAO,CAAC,sCAAsC,CAAC,CAAC;AAErF,IAAIG,OAAO,GAAGD,sBAAsB,CAACF,OAAO,CAAC,wCAAwC,CAAC,CAAC;AAEvF,IAAII,OAAO,GAAGF,sBAAsB,CAACF,OAAO,CAAC,0CAA0C,CAAC,CAAC;AAEzF,IAAIK,OAAO,GAAGH,sBAAsB,CAACF,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAEtF,IAAIM,OAAO,GAAGJ,sBAAsB,CAACF,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAEtF,IAAIO,OAAO,GAAGL,sBAAsB,CAACF,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAE9E,IAAIQ,OAAO,GAAGN,sBAAsB,CAACF,OAAO,CAAC,iCAAiC,CAAC,CAAC;AAEhF,IAAIS,OAAO,GAAGP,sBAAsB,CAACF,OAAO,CAAC,iCAAiC,CAAC,CAAC;AAEhF,IAAIU,QAAQ,GAAGR,sBAAsB,CAACF,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAEpE,IAAIW,QAAQ,GAAGT,sBAAsB,CAACF,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAE/E,SAASE,sBAAsBA,CAACU,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEf,OAAO,EAAEed,kBAAkBA,CAACgB,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACnD,CAAC,CAAC,EAAEL,QAAQ,CAACd,OAAO,EAAE,CAAC,EAAEoB,SAAS,CAAC;EACnC,IAAIrB,KAAK,GAAG,CAAC;EACb,IAAIsB,IAAI;EACR,IAAIC,QAAQ,GAAG,CAAC,CAAC,EAAET,QAAQ,CAACb,OAAO,EAAEiB,IAAI,CAAC;EAC1C,IAAIM,SAAS,GAAG,CAAC,CAAC,EAAEV,QAAQ,CAACb,OAAO,EAAEkB,QAAQ,CAAC;EAE/C,IAAI,EAAEC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,IAAIA,OAAO,CAACE,IAAI,CAAC,EAAE;IAC7D;IACA,IAAIG,aAAa,GAAG,CAAC,CAAC,EAAEZ,OAAO,CAACZ,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC,CAAC,CAAC;;IAE/D,IAAIE,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAACyB,eAAe,EAAE;MACpD5B,KAAK,GAAG,CAAC,CAAC,EAAEa,OAAO,CAACZ,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;MACjDF,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAAC0B,aAAa,EAAE;MACzD7B,KAAK,GAAG,CAAC,CAAC,EAAEY,OAAO,CAACX,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;MACjDF,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAAC2B,YAAY,IAAIJ,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAEtB,OAAO,CAACJ,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE;MACnHxB,KAAK,GAAG,CAAC,CAAC,EAAEW,OAAO,CAACV,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;MACjDF,IAAI,GAAG,MAAM;IACf,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAAC4B,aAAa,KAAK/B,KAAK,GAAG,CAAC,CAAC,EAAEK,OAAO,CAACJ,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC,CAAC,IAAIE,IAAI,CAACC,GAAG,CAAC3B,KAAK,CAAC,GAAG,CAAC,EAAE;MACvIsB,IAAI,GAAG,KAAK;IACd,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAAC6B,cAAc,EAAE;MAC1DhC,KAAK,GAAG,CAAC,CAAC,EAAES,OAAO,CAACR,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;MACjDF,IAAI,GAAG,MAAM;IACf,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAAC8B,gBAAgB,EAAE;MAC5DjC,KAAK,GAAG,CAAC,CAAC,EAAEO,OAAO,CAACN,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;MACjDF,IAAI,GAAG,OAAO;IAChB,CAAC,MAAM,IAAII,IAAI,CAACC,GAAG,CAACF,aAAa,CAAC,GAAGtB,MAAM,CAAC+B,aAAa,EAAE;MACzD,IAAI,CAAC,CAAC,EAAE1B,OAAO,CAACP,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC,GAAG,CAAC,EAAE;QACjD;QACAxB,KAAK,GAAG,CAAC,CAAC,EAAEQ,OAAO,CAACP,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;QACjDF,IAAI,GAAG,SAAS;MAClB,CAAC,MAAM;QACLtB,KAAK,GAAG,CAAC,CAAC,EAAEU,OAAO,CAACT,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;QACjDF,IAAI,GAAG,MAAM;MACf;IACF,CAAC,MAAM;MACLtB,KAAK,GAAG,CAAC,CAAC,EAAEU,OAAO,CAACT,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;MACjDF,IAAI,GAAG,MAAM;IACf;EACF,CAAC,MAAM;IACL;IACAA,IAAI,GAAGF,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACE,IAAI;IAErE,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACrBtB,KAAK,GAAG,CAAC,CAAC,EAAEa,OAAO,CAACZ,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,QAAQ,EAAE;MAC5BtB,KAAK,GAAG,CAAC,CAAC,EAAEY,OAAO,CAACX,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,MAAM,EAAE;MAC1BtB,KAAK,GAAG,CAAC,CAAC,EAAEW,OAAO,CAACV,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,KAAK,EAAE;MACzBtB,KAAK,GAAG,CAAC,CAAC,EAAEK,OAAO,CAACJ,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,MAAM,EAAE;MAC1BtB,KAAK,GAAG,CAAC,CAAC,EAAES,OAAO,CAACR,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,OAAO,EAAE;MAC3BtB,KAAK,GAAG,CAAC,CAAC,EAAEO,OAAO,CAACN,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,SAAS,EAAE;MAC7BtB,KAAK,GAAG,CAAC,CAAC,EAAEQ,OAAO,CAACP,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIF,IAAI,KAAK,MAAM,EAAE;MAC1BtB,KAAK,GAAG,CAAC,CAAC,EAAEU,OAAO,CAACT,OAAO,EAAEsB,QAAQ,EAAEC,SAAS,CAAC;IACnD;EACF;EAEA,IAAIW,GAAG,GAAG,IAAIC,IAAI,CAACC,kBAAkB,CAACjB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACkB,MAAM,EAAE;IACtGC,aAAa,EAAEnB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACmB,aAAa;IACtFC,OAAO,EAAE,CAACpB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACoB,OAAO,KAAK,MAAM;IACtFC,KAAK,EAAErB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACqB;EACnE,CAAC,CAAC;EACF,OAAON,GAAG,CAACO,MAAM,CAAC1C,KAAK,EAAEsB,IAAI,CAAC;AAChC;AAEAqB,MAAM,CAAC5C,OAAO,GAAGA,OAAO,CAACE,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}